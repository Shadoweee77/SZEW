// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SZEW.Data;

#nullable disable

namespace SZEW.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20250114215125_Quick_DateTime_fix")]
    partial class Quick_DateTime_fix
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SZEW.Models.SaleDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("DocumentIssuerId")
                        .HasColumnType("integer");

                    b.Property<int>("DocumentType")
                        .HasColumnType("integer");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("IssueDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("RelatedJobId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DocumentIssuerId");

                    b.HasIndex("RelatedJobId")
                        .IsUnique();

                    b.ToTable("SaleDocuments");
                });

            modelBuilder.Entity("SZEW.Models.SparePart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("OrderId")
                        .HasColumnType("integer");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("SpareParts");
                });

            modelBuilder.Entity("SZEW.Models.SparePartsOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("OrdererId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("OrdererId");

                    b.ToTable("SparePartsOrders");
                });

            modelBuilder.Entity("SZEW.Models.Tool", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("OrderId")
                        .HasColumnType("integer");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("Tools");
                });

            modelBuilder.Entity("SZEW.Models.ToolsOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("OrdererId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("OrdererId");

                    b.ToTable("ToolsOrders");
                });

            modelBuilder.Entity("SZEW.Models.ToolsRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("RequesterId")
                        .HasColumnType("integer");

                    b.Property<bool>("Verified")
                        .HasColumnType("boolean");

                    b.Property<int?>("VerifierId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RequesterId");

                    b.HasIndex("VerifierId");

                    b.ToTable("ToolsRequests");
                });

            modelBuilder.Entity("SZEW.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("SZEW.Models.Vehicle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Color")
                        .HasColumnType("text");

                    b.Property<string>("Make")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Model")
                        .HasColumnType("text");

                    b.Property<int>("OwnerId")
                        .HasColumnType("integer");

                    b.Property<string>("RegistrationNumber")
                        .HasColumnType("text");

                    b.Property<string>("VIN")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Year")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Vehicles");
                });

            modelBuilder.Entity("SZEW.Models.WorkshopClient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ClientType")
                        .HasColumnType("integer");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Clients");

                    b.HasDiscriminator<int>("ClientType");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("SZEW.Models.WorkshopJob", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AdmissionDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("Complete")
                        .HasColumnType("boolean");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("VehicleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("VehicleId");

                    b.ToTable("Jobs");
                });

            modelBuilder.Entity("SZEW.Models.WorkshopTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AssignedWorkerId")
                        .HasColumnType("integer");

                    b.Property<bool>("Complete")
                        .HasColumnType("boolean");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.Property<int>("WorkshopJobId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AssignedWorkerId");

                    b.HasIndex("WorkshopJobId");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("SZEW.Models.WorkshopBusinessClient", b =>
                {
                    b.HasBaseType("SZEW.Models.WorkshopClient");

                    b.Property<string>("NIP")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("SZEW.Models.WorkshopIndividualClient", b =>
                {
                    b.HasBaseType("SZEW.Models.WorkshopClient");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.ToTable("Clients", t =>
                        {
                            t.Property("Name")
                                .HasColumnName("WorkshopIndividualClient_Name");
                        });

                    b.HasDiscriminator().HasValue(0);
                });

            modelBuilder.Entity("SZEW.Models.SaleDocument", b =>
                {
                    b.HasOne("SZEW.Models.User", "DocumentIssuer")
                        .WithMany("IssuedSaleDocuments")
                        .HasForeignKey("DocumentIssuerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SZEW.Models.WorkshopJob", "RelatedJob")
                        .WithOne("RelatedSaleDocument")
                        .HasForeignKey("SZEW.Models.SaleDocument", "RelatedJobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DocumentIssuer");

                    b.Navigation("RelatedJob");
                });

            modelBuilder.Entity("SZEW.Models.SparePart", b =>
                {
                    b.HasOne("SZEW.Models.SparePartsOrder", "Order")
                        .WithMany("SpareParts")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("SZEW.Models.SparePartsOrder", b =>
                {
                    b.HasOne("SZEW.Models.User", "Orderer")
                        .WithMany("SparePartsOrders")
                        .HasForeignKey("OrdererId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Orderer");
                });

            modelBuilder.Entity("SZEW.Models.Tool", b =>
                {
                    b.HasOne("SZEW.Models.ToolsOrder", "Order")
                        .WithMany("Tools")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("SZEW.Models.ToolsOrder", b =>
                {
                    b.HasOne("SZEW.Models.User", "Orderer")
                        .WithMany("ToolsOrders")
                        .HasForeignKey("OrdererId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Orderer");
                });

            modelBuilder.Entity("SZEW.Models.ToolsRequest", b =>
                {
                    b.HasOne("SZEW.Models.User", "Requester")
                        .WithMany("ToolsRequestsRequested")
                        .HasForeignKey("RequesterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SZEW.Models.User", "Verifier")
                        .WithMany("ToolsRequestsVerified")
                        .HasForeignKey("VerifierId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Requester");

                    b.Navigation("Verifier");
                });

            modelBuilder.Entity("SZEW.Models.Vehicle", b =>
                {
                    b.HasOne("SZEW.Models.WorkshopClient", "Owner")
                        .WithMany("Vehicles")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("SZEW.Models.WorkshopJob", b =>
                {
                    b.HasOne("SZEW.Models.Vehicle", "Vehicle")
                        .WithMany("Jobs")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("SZEW.Models.WorkshopTask", b =>
                {
                    b.HasOne("SZEW.Models.User", "AssignedWorker")
                        .WithMany()
                        .HasForeignKey("AssignedWorkerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SZEW.Models.WorkshopJob", "WorkshopJob")
                        .WithMany("Tasks")
                        .HasForeignKey("WorkshopJobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssignedWorker");

                    b.Navigation("WorkshopJob");
                });

            modelBuilder.Entity("SZEW.Models.SparePartsOrder", b =>
                {
                    b.Navigation("SpareParts");
                });

            modelBuilder.Entity("SZEW.Models.ToolsOrder", b =>
                {
                    b.Navigation("Tools");
                });

            modelBuilder.Entity("SZEW.Models.User", b =>
                {
                    b.Navigation("IssuedSaleDocuments");

                    b.Navigation("SparePartsOrders");

                    b.Navigation("ToolsOrders");

                    b.Navigation("ToolsRequestsRequested");

                    b.Navigation("ToolsRequestsVerified");
                });

            modelBuilder.Entity("SZEW.Models.Vehicle", b =>
                {
                    b.Navigation("Jobs");
                });

            modelBuilder.Entity("SZEW.Models.WorkshopClient", b =>
                {
                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("SZEW.Models.WorkshopJob", b =>
                {
                    b.Navigation("RelatedSaleDocument");

                    b.Navigation("Tasks");
                });
#pragma warning restore 612, 618
        }
    }
}
